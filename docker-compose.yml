services:
    web:
        image: nginx:latest # Using the default Nginx image with custom configuration.
        volumes:
            # Mount the application code for live updates
            - ./:/var/www
              # Mount the Nginx configuration file
            - ./docker/development/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        ports:
            # Map port 80 inside the container to the port specified by 'NGINX_PORT' on the host machine
            - "${NGINX_PORT:-80}:80"
        environment:
            - NGINX_HOST=localhost
        networks:
            - laravel-development
        depends_on:
            php-fpm:
                condition: service_healthy # Wait for php-fpm to start

    php-fpm:
        # For the php-fpm service, we will create a custom image to install the necessary PHP extensions and setup proper permissions.
        build:
            context: .
            dockerfile: ./docker/common/php-fpm/Dockerfile
            target: development
            args:
                UID: ${UID:-1000}
                GID: ${GID:-1000}
                XDEBUG_ENABLED: ${XDEBUG_ENABLED:-true}
                XDEBUG_MODE: develop,coverage,debug,profile
                XDEBUG_HOST: ${XDEBUG_HOST:-host.docker.internal}
                XDEBUG_IDE_KEY: ${XDEBUG_IDE_KEY:-DOCKER}
                XDEBUG_LOG: /dev/stdout
                XDEBUG_LOG_LEVEL: 0
        ports:
            - "8001:8000" # Standardport für Laravel

        restart: unless-stopped
        volumes:
            # Mount the application code for live updates
            - ./:/var/www
        env_file:
            - .env
        user: "${UID:-1000}:${GID:-1000}"
        networks:
            - laravel-development
        healthcheck:
            test: ["CMD-SHELL", "php-fpm-healthcheck || exit 1"]
            interval: 10s
            timeout: 5s
            retries: 3
        # The 'depends_on' attribute with 'condition: service_healthy' ensures that
        # this service will not start until the 'postgres' service passes its health check.
        # This prevents the application from trying to connect to the database before it's ready.
        depends_on:
            postgres:
                condition: service_healthy

    postgres:
        image: postgres:16
        restart: unless-stopped
        user: postgres
        ports:
            - "${POSTGRES_PORT:-5432}:5432"
        environment:
            - POSTGRES_DB=${POSTGRES_DATABASE:-app}
            - POSTGRES_USER=${POSTGRES_USERNAME:-laravel}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secret}
        volumes:
            - postgres-data-development:/var/lib/postgresql/data
        networks:
            - laravel-development
        # Health check for PostgreSQL
        # -----------------------------------------------------------
        # Health checks allow Docker to determine if a service is operational.
        # The 'pg_isready' command checks if PostgreSQL is ready to accept connections.
        # This prevents dependent services from starting before the database is ready.
        # -----------------------------------------------------------
        healthcheck:
            test: ["CMD", "pg_isready"]
            interval: 10s
            timeout: 5s
            retries: 10

    workspace:
        # For the workspace service, we will also create a custom image to install and setup all the necessary stuff.
        build:
            context: .
            dockerfile: ./docker/development/workspace/Dockerfile
            args:
                UID: ${UID:-1000}
                GID: ${GID:-1000}
                XDEBUG_ENABLED: ${XDEBUG_ENABLED:-true}
                XDEBUG_MODE: develop,coverage,debug,profile
                XDEBUG_HOST: ${XDEBUG_HOST:-host.docker.internal}
                XDEBUG_IDE_KEY: ${XDEBUG_IDE_KEY:-DOCKER}
                XDEBUG_LOG: /dev/stdout
                XDEBUG_LOG_LEVEL: 7
        tty: true # Enables an interactive terminal
        stdin_open: true # Keeps standard input open for 'docker exec'
        ports:
            - "5174:5174" # Beispielport für Vite
        env_file:
            - .env
        volumes:
            - ./:/var/www
        networks:
            - laravel-development

networks:
    # Attach the service to the 'laravel' network.
    # -----------------------------------------------------------
    # This custom network allows all services within it to communicate using their service names as hostnames.
    # For example, 'php-fpm' can connect to 'postgres' by using 'postgres' as the hostname.
    # -----------------------------------------------------------
    laravel-development:

volumes:
    postgres-data-development:
    laravel-storage-development:
